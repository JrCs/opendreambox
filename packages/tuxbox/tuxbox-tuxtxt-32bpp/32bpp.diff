diff -ru tuxtxt.e1/tuxtxt.c tuxtxt/tuxtxt.c
--- tuxtxt.e1/tuxtxt.c	2008-08-13 20:08:47.000000000 +0200
+++ tuxtxt/tuxtxt.c	2008-06-20 16:31:00.000000000 +0200
@@ -6,21 +6,50 @@
  *    continued 2004-2005 by Roland Meier <RolandMeier@Siemens.com>           *
  *                       and DBLuelle <dbluelle@blau-weissoedingen.de>        *
  *                                                                            *
+ *              ported 2006 to Dreambox 7025 / 32Bit framebuffer              *
+ *                   by Seddi <seddi@i-have-a-dreambox.com>                   *
+ *                                                                            *
+ *              ported 32Bit framebuffer to Tuxtxt v1.99 (2008)               *
+ *                      by the PLi team (Sat-Turner)                          *
+ *                                                                            *
  ******************************************************************************/
 
 
 
 #include "tuxtxt.h"
 
+static char saved_wss[32];
+static char saved_pin8[32];
+
+void readproc(const char* source, char *dest)
+{
+	FILE *f=fopen(source, "rt");
+	if(f)
+	{
+		fgets(dest, 255, f);
+		fclose(f);
+	}
+}
+
+void writeproc(const char* dest, const char *value)
+{
+	FILE *f=fopen(dest, "w");
+	if (f)
+	{
+		fwrite(value, strlen(value), 1, f);
+		fclose(f);
+	}
+}
+
 void FillBorder(int color)
 {
 	int ys =  (var_screeninfo.yres-var_screeninfo.yoffset);
-	tuxtxt_FillRect(lfb,var_screeninfo.xres,0     , ys                     ,StartX      ,var_screeninfo.yres                       ,color);
-	tuxtxt_FillRect(lfb,var_screeninfo.xres,StartX, ys                     ,displaywidth,StartY                                    ,color);
-	tuxtxt_FillRect(lfb,var_screeninfo.xres,StartX, ys+StartY+25*fontheight,displaywidth,var_screeninfo.yres-(StartY+25*fontheight),color);
+	tuxtxt_FillRect(lfb,fix_screeninfo.line_length,0     , ys                     ,StartX      ,var_screeninfo.yres                       ,color);
+	tuxtxt_FillRect(lfb,fix_screeninfo.line_length,StartX, ys                     ,displaywidth,StartY                                    ,color);
+	tuxtxt_FillRect(lfb,fix_screeninfo.line_length,StartX, ys+StartY+25*fontheight,displaywidth,var_screeninfo.yres-(StartY+25*fontheight),color);
 
 	if (screenmode == 0 )
-		tuxtxt_FillRect(lfb,var_screeninfo.xres,StartX+displaywidth, ys,var_screeninfo.xres-(StartX+displaywidth),var_screeninfo.yres   ,color);
+		tuxtxt_FillRect(lfb,fix_screeninfo.line_length,StartX+displaywidth, ys,fix_screeninfo.line_length-(StartX+displaywidth),var_screeninfo.yres   ,color);
 }
 
 int getIndexOfPageInHotlist()
@@ -177,17 +206,17 @@
 
 void ClearBB(int color)
 {
-	memset(lfb + (var_screeninfo.yres-var_screeninfo.yoffset)*var_screeninfo.xres, color, var_screeninfo.xres*var_screeninfo.yres);
+	tuxtxt_FillRect(lfb,fix_screeninfo.line_length,0, var_screeninfo.yres - var_screeninfo.yoffset, fix_screeninfo.line_length, var_screeninfo.yres, color);
 }
 
 void ClearFB(int color)
 {
-	memset(lfb + var_screeninfo.xres*var_screeninfo.yoffset, color, var_screeninfo.xres*var_screeninfo.yres);
+	tuxtxt_FillRect(lfb,fix_screeninfo.line_length,0, var_screeninfo.yoffset, fix_screeninfo.line_length, var_screeninfo.yres, color);
 }
 
 void ClearB(int color)
 {
-	memset(lfb, color, 2*var_screeninfo.xres*var_screeninfo.yres);
+	tuxtxt_FillRect(lfb,fix_screeninfo.line_length,0, 0, fix_screeninfo.line_length, var_screeninfo.yres*2, color);
 }
 
 
@@ -233,47 +262,29 @@
 
 void setcolors(unsigned short *pcolormap, int offset, int number)
 {
-	int i, changed=0;
+	int i,trans_tmp;
 	int j = offset; /* index in global color table */
 
-	unsigned short t = tr0[transp2];
-	tr0[transp2] = (trans_mode+7)<<11 | 0x7FF;
-#ifndef HAVE_DREAMBOX_HARDWARE
-	/* "correct" semi-transparent for Nokia (GTX only allows 2(?) levels of transparency) */
-	if (tuxbox_get_vendor() == TUXBOX_VENDOR_NOKIA)
-		tr0[transp2] = 0xFFFF;
-#endif
-	if (t != tr0[transp2]) changed = 1;
+	trans_tmp=25-trans_mode;
+
+	bgra[transp2][3]=((trans_tmp+7)<<11 | 0x7FF)>>8;
+
 	for (i = 0; i < number; i++)
 	{
-		int r = (pcolormap[i] << 12) & 0xf000;
-		int g = (pcolormap[i] <<  8) & 0xf000;
-		int b = (pcolormap[i] <<  4) & 0xf000;
-
+		int r = (pcolormap[i] << 12 & 0xF000) >> 8;
+		int g = (pcolormap[i] << 8 & 0xF000) >> 8;
+		int b = (pcolormap[i] << 4 & 0xF000) >> 8;
 
 		r = (r * (0x3f+(color_mode<<3))) >> 8;
 		g = (g * (0x3f+(color_mode<<3))) >> 8;
 		b = (b * (0x3f+(color_mode<<3))) >> 8;
-		if (rd0[j] != r)
-		{
-			rd0[j] = r;
-			changed = 1;
-		}
-		if (gn0[j] != g)
-		{
-			gn0[j] = g;
-			changed = 1;
-		}
-		if (bl0[j] != b)
-		{
-			bl0[j] = b;
-			changed = 1;
-		}
+
+		bgra[j][2]=r;
+		bgra[j][1]=g;
+		bgra[j][0]=b;
+		
 		j++;
 	}
-	if (changed)
-		if (ioctl(fb, FBIOPUTCMAP, &colormap_0) == -1)
-			perror("TuxTxt <FBIOPUTCMAP>");
 }
 
 
@@ -303,13 +314,14 @@
 
 
 /******************************************************************************
- * plugin_exec                                                                *
+ * main loop                                                                  *
  ******************************************************************************/
 
-void plugin_exec(PluginParam *par)
+int main(int argc, char **argv)
 {
-	char cvs_revision[] = "$Revision: 1.100 $";
+	char cvs_revision[] = "$Revision: 1.99 $";
 
+	int cnt=0;
 #if !TUXTXT_CFG_STANDALONE
 	int initialized = tuxtxt_init();
 	if ( initialized )
@@ -319,30 +331,71 @@
 	/* show versioninfo */
 	sscanf(cvs_revision, "%*s %s", versioninfo);
 	printf("TuxTxt %s\n", versioninfo);
+	printf("for 32bpp framebuffer\n");
 
 	/* get params */
 	tuxtxt_cache.vtxtpid = fb = lcd = rc = sx = ex = sy = ey = -1;
+	if (argc==1)
+	{
+		printf("\nUSAGE: tuxtxt vtpid\n");
+		printf("No PID given, so scanning for PIDs ...\n\n");
+		tuxtxt_cache.vtxtpid=0;
+	}
+	else 
+	{
+		tuxtxt_cache.vtxtpid = atoi(argv[1]);
+	}
 
-	for (; par; par = par->next)
+	/* open Framebuffer */
+	if ((fb=open("/dev/fb/0", O_RDWR)) == -1)
 	{
-		if (!strcmp(par->id, P_ID_VTXTPID))
-			tuxtxt_cache.vtxtpid = atoi(par->val);
-		else if (!strcmp(par->id, P_ID_FBUFFER))
-			fb = atoi(par->val);
-		else if (!strcmp(par->id, P_ID_LCD))
-			lcd = atoi(par->val);
-		else if (!strcmp(par->id, P_ID_RCINPUT))
-			rc = atoi(par->val);
-		else if (!strcmp(par->id, P_ID_OFF_X))
-			sx = atoi(par->val);
-		else if (!strcmp(par->id, P_ID_END_X))
-			ex = atoi(par->val);
-		else if (!strcmp(par->id, P_ID_OFF_Y))
-			sy = atoi(par->val);
-		else if (!strcmp(par->id, P_ID_END_Y))
-			ey = atoi(par->val);
+		perror("TuxTxt <open /dev/fb/0>");
+		return 0;
 	}
 
+	rc=-1;
+	while(1)
+	{
+		struct stat s;
+		char tmp[128];
+		sprintf(tmp, "/dev/input/event%d", cnt);
+		if (stat(tmp, &s))
+			break;
+		/* open Remote Control */
+		if ((rc=open(tmp, O_RDONLY)) == -1)
+		{
+			perror("TuxTxt <open remote control>");
+			return 0;
+		}
+		if (ioctl(rc, EVIOCGNAME(128), tmp) < 0)
+			perror("EVIOCGNAME failed");
+		if (strstr(tmp, "remote control"))
+			break;
+		close(rc);
+		rc=-1;
+		++cnt;
+	}
+	
+	if (rc == -1)
+	{
+		printf("couldnt find correct input device!!!\n");
+		return -1;
+	}
+
+	fcntl(rc, F_SETFL, fcntl(rc, F_GETFL) | O_EXCL | O_NONBLOCK);
+
+	/* open LCD  */
+	if ((lcd=open("/dev/dbox/lcd0", O_RDWR)) == -1)
+	{
+		perror("TuxTxt <open /dev/dbox/lcd0>");
+		return 0;
+	}
+
+	sx = 80;
+	ex = 620;
+	sy = 30;
+	ey = 555;
+	
 	if (tuxtxt_cache.vtxtpid == -1 || fb == -1 || rc == -1 || sx == -1 || ex == -1 || sy == -1 || ey == -1)
 	{
 		printf("TuxTxt <Invalid Param(s)>\n");
@@ -410,6 +463,7 @@
 					int vendor = 3; /* values unknown, rely on requested values */
 #endif
 
+#if 0
 					if (vendor < 3) /* scart-parameters only known for 3 dboxes, FIXME: order must be like in info.h */
 					{
 						for (i = 0; i < 6; i++) /* FIXME: FBLK seems to cause troubles */
@@ -442,6 +496,7 @@
 								perror("TuxTxt <ioctl(avs)>");
 						}
 					}
+#endif
 					continue; /* otherwise ignore exit key */
 				}
 				default:
@@ -604,9 +659,10 @@
 	prev_10    = 0x100;
 	next_100   = 0x100;
 	next_10    = 0x100;
+	zoommode = 0;
 	tuxtxt_cache.subpage    = tuxtxt_cache.subpagetable[tuxtxt_cache.page];
 	if (tuxtxt_cache.subpage == 0xff)
-	tuxtxt_cache.subpage    = 0;
+		tuxtxt_cache.subpage    = 0;
 	
 	tuxtxt_cache.pageupdate = 0;
 
@@ -701,6 +757,14 @@
 	            dumpl25 = ival & 1;
 			else if (1 == sscanf(line, "UseTTF %i", &ival))
 	            usettf = ival & 1;
+			else if (1 == sscanf(line, "StartX %i", &ival))
+	            sx = ival;
+			else if (1 == sscanf(line, "EndX %i", &ival))
+	            ex = ival;
+			else if (1 == sscanf(line, "StartY %i", &ival))
+	            sy = ival;
+			else if (1 == sscanf(line, "EndY %i", &ival))
+	            ey = ival;
 		}
 		fclose(conf);
 	}
@@ -764,11 +828,8 @@
 		typettf.font.pix_height = (FT_UShort) 23;
 	}
 
-#if HAVE_DVB_API_VERSION >= 3
-	typettf.flags = FT_LOAD_MONOCHROME;
-#else
 	typettf.image_type = ftc_image_mono;
-#endif
+
 	if ((error = FTC_Manager_Lookup_Face(manager, typettf.font.face_id, &face)))
 	{
 		typettf.font.face_id = (usettf ? (FTC_FaceID) TUXTXTTTF : TUXTXTOTB);
@@ -896,46 +957,16 @@
 	tuxtxt_start(tuxtxt_cache.vtxtpid);
 #endif
 
-	/* open avs */
-	if ((avs = open(AVS, O_RDWR)) == -1)
-	{
-		perror("TuxTxt <open AVS>");
-		FTC_Manager_Done(manager);
-		FT_Done_FreeType(library);
-		return 0;
-	}
-
-	ioctl(avs, AVSIOGSCARTPIN8, &fnc_old);
-	ioctl(avs, AVSIOSSCARTPIN8, &fncmodes[screen_mode1]);
-
-	/* open saa */
-	if ((saa = open(SAA, O_RDWR)) == -1)
-	{
-		perror("TuxTxt <open SAA>");
-		FTC_Manager_Done(manager);
-		FT_Done_FreeType(library);
-		return 0;
-	}
-
-	ioctl(saa, SAAIOGWSS, &saa_old);
-	ioctl(saa, SAAIOSWSS, &saamodes[screen_mode1]);
-
-	/* open pig */
-	if ((pig = open(PIG, O_RDWR)) == -1)
-	{
-		perror("TuxTxt <open PIG>");
-		FTC_Manager_Done(manager);
-		FT_Done_FreeType(library);
-		return 0;
-	}
-
+	readproc("/proc/stb/denc/0/wss", saved_wss);
+	writeproc("/proc/stb/denc/0/wss", saamodes[screen_mode1]);
+	
+	readproc("/proc/stb/avs/0/sb", saved_pin8);
+	writeproc("/proc/stb/avs/0/sb", fncmodes[screen_mode1]);
+	
 	/* setup rc */
 	fcntl(rc, F_SETFL, O_NONBLOCK);
 	ioctl(rc, RC_IOCTL_BCODES, 1);
 
-
-
-
 	gethotlist();
 	SwitchScreenMode(screenmode);
 	prevscreenmode = screenmode;
@@ -957,7 +988,6 @@
 	/* hide and close pig */
 	if (screenmode)
 		SwitchScreenMode(0); /* turn off divided screen */
-	close(pig);
 
 #if TUXTXT_CFG_STANDALONE
 	tuxtxt_stop_thread();
@@ -965,12 +995,10 @@
 	if (tuxtxt_cache.dmx != -1)
     	    close(tuxtxt_cache.dmx);
 	tuxtxt_cache.dmx = -1;
-#else
-	tuxtxt_stop();
 #endif
 	/* restore videoformat */
-	ioctl(avs, AVSIOSSCARTPIN8, &fnc_old);
-	ioctl(saa, SAAIOSWSS, &saa_old);
+	writeproc("/proc/stb/avs/0/sb", saved_pin8);
+	writeproc("/proc/stb/denc/0/wss", saved_wss);
 
 	if (restoreaudio)
 	{
@@ -979,6 +1007,7 @@
 #else
 		int vendor = 3; /* values unknown, rely on requested values */
 #endif
+#if 0
 		if (vendor < 3) /* scart-parameters only known for 3 dboxes, FIXME: order must be like in info.h */
 		{
 			for (i = 1; i < 6; i += 2) /* restore dvb audio */
@@ -988,6 +1017,7 @@
 					perror("TuxTxt <ioctl(avs)>");
 			}
 		}
+#endif
 	}
 	/* clear subtitlecache */
 	for (i = 0; i < SUBTITLE_CACHESIZE; i++)
@@ -1003,12 +1033,8 @@
 		if (ioctl(fb, FBIOPAN_DISPLAY, &var_screeninfo) == -1)
 			perror("TuxTxt <FBIOPAN_DISPLAY>");
 	}
-	 /* close avs */
-	close(avs);
-
-	/* close saa */
-	close(saa);
-
+	/* clear screen */
+	memset(lfb, 0, var_screeninfo.yres * fix_screeninfo.line_length);
 
 	/* close freetype */
 	FTC_Manager_Done(manager);
@@ -1017,7 +1043,17 @@
 	/* unmap framebuffer */
 	munmap(lfb, fix_screeninfo.smem_len);
 
+	/* close lcd */
+	close(lcd);
+	
+	/* close rc */
+	close(rc);
 
+	/* close framebuffer */
+	close(fb);
+	
+	lcd = rc = fb = -1;
+ 
 	if (hotlistchanged)
 		savehotlist();
 
@@ -1050,6 +1086,10 @@
 			fprintf(conf, "ShowLevel2p5 %d\n", showl25);
 			fprintf(conf, "DumpLevel2p5 %d\n", dumpl25);
 			fprintf(conf, "UseTTF %d\n", usettf);
+			fprintf(conf, "StartX %d\n", sx);
+			fprintf(conf, "EndX %d\n", ex);
+			fprintf(conf, "StartY %d\n", sy);
+			fprintf(conf, "EndY %d\n", ey);
 			fclose(conf);
 		}
 	}
@@ -1714,6 +1754,7 @@
 					memset(&menu[Menu_Width*MenuLine[M_COL] + 3+color_mode  ], 0x20,24-color_mode);
 					Menu_HighlightLine(menu, MenuLine[menuitem], 1);
 					setcolors((unsigned short *)tuxtxt_defaultcolors, 0, SIZECOLTABLE);
+					Menu_Init(menu, current_pid, menuitem, hotindex);
 					break;
 				case M_TRA:
 					saveconfig = 1;
@@ -1725,6 +1766,7 @@
 					memset(&menu[Menu_Width*MenuLine[M_TRA] + 3+trans_mode  ], 0x20,24-trans_mode);
 					Menu_HighlightLine(menu, MenuLine[menuitem], 1);
 					setcolors((unsigned short *)tuxtxt_defaultcolors, 0, SIZECOLTABLE);
+					Menu_Init(menu, current_pid, menuitem, hotindex);
 					break;
 				case M_PID:
 				{
@@ -1834,6 +1876,7 @@
 					memset(&menu[Menu_Width*MenuLine[M_COL] + 3+color_mode  ], 0x20,24-color_mode);
 					Menu_HighlightLine(menu, MenuLine[menuitem], 1);
 					setcolors((unsigned short *)tuxtxt_defaultcolors, 0, SIZECOLTABLE);
+					Menu_Init(menu, current_pid, menuitem, hotindex);
 					break;
 				case M_TRA:
 					saveconfig = 1;
@@ -1845,6 +1888,7 @@
 					memset(&menu[Menu_Width*MenuLine[M_TRA] + 3+trans_mode  ], 0x20,24-trans_mode);
 					Menu_HighlightLine(menu, MenuLine[menuitem], 1);
 					setcolors((unsigned short *)tuxtxt_defaultcolors, 0, SIZECOLTABLE);
+					Menu_Init(menu, current_pid, menuitem, hotindex);
 					break;
 				case M_PID:
 					if (!getpidsdone)
@@ -2152,8 +2196,8 @@
 					memcpy(&menu[Menu_Width*MenuLine[M_SC1] + Menu_Width - 5], &configonoff[menulanguage][screen_mode1  ? 3 : 0], 3);
 					Menu_HighlightLine(menu, MenuLine[menuitem], 1);
 
-					ioctl(avs, AVSIOSSCARTPIN8, &fncmodes[screen_mode1]);
-					ioctl(saa, SAAIOSWSS, &saamodes[screen_mode1]);
+					writeproc("/proc/stb/avs/0/sb", fncmodes[screen_mode1]);
+					writeproc("/proc/stb/denc/0/wss", saamodes[screen_mode1]);
 
 					break;
 
@@ -2280,7 +2324,8 @@
 	}
 
 	/* generate pagenumber */
-	temp_page |= Number << inputcounter*4;
+	if (inputcounter >= 0)
+		temp_page |= Number << inputcounter*4;
 
 	inputcounter--;
 
@@ -2720,9 +2765,9 @@
 
 void SwitchScreenMode(int newscreenmode)
 {
-#if HAVE_DVB_API_VERSION >= 3
+
 	struct v4l2_format format;
-#endif
+
 	/* reset transparency mode */
 	if (transpmode)
 		transpmode = 0;
@@ -2782,42 +2827,53 @@
 
 		setfontwidth(fw);
 
-#if HAVE_DVB_API_VERSION < 3
-		avia_pig_hide(pig);
-		avia_pig_set_pos(pig, tx, ty);
-		avia_pig_set_size(pig, tw, th);
-		avia_pig_set_stack(pig, 2);
-		avia_pig_show(pig);
-#else
-		int sm = 0;
-		ioctl(pig, VIDIOC_OVERLAY, &sm);
-		sm = 1;
-		ioctl(pig, VIDIOC_G_FMT, &format);
-		format.type = V4L2_BUF_TYPE_VIDEO_OVERLAY;
-		format.fmt.win.w.left   = tx;
-		format.fmt.win.w.top    = ty;
-		format.fmt.win.w.width  = tw;
-		format.fmt.win.w.height = th;
-		ioctl(pig, VIDIOC_S_FMT, &format);
-		ioctl(pig, VIDIOC_OVERLAY, &sm);
-#endif
-		ioctl(avs, AVSIOSSCARTPIN8, &fncmodes[screen_mode2]);
-		ioctl(saa, SAAIOSWSS, &saamodes[screen_mode2]);
+		// Video picture scale/pos for e2
+		int i;
+		for (i=0; i<4; ++i)
+		{
+			char *targets[]={"left", "top", "width", "height"};
+			char filename[128];
+			snprintf(filename, 128, "/proc/stb/vmpeg/%d/dst_%s", 0, targets[i]);
+			FILE *f = fopen(filename, "w");
+			if (!f)
+				break;
+			int val = 0;
+			switch (i)
+			{
+			case 0: val = tx; break;
+			case 1: val = ty; break;
+			case 2: val = tw; break;
+			case 3: val = th; break;
+			}
+			fprintf(f, "%08x\n", val);
+			fclose(f);
+		}
+		
+		writeproc("/proc/stb/avs/0/sb", fncmodes[screen_mode2]);
+		writeproc("/proc/stb/denc/0/wss", saamodes[screen_mode2]);
 	}
 	else /* not split */
 	{
-#if HAVE_DVB_API_VERSION < 3
-		avia_pig_hide(pig);
-#else
-		ioctl(pig, VIDIOC_OVERLAY, &screenmode);
-#endif
-
+		// Video picture scale/pos for e2
+		int i;
+		for (i=0; i<4; ++i)
+		{
+			char *targets[]={"left", "top", "width", "height"};
+			char filename[128];
+			snprintf(filename, 128, "/proc/stb/vmpeg/%d/dst_%s", 0, targets[i]);
+			FILE *f = fopen(filename, "w");
+			if (!f)
+				break;
+			fprintf(f, "%08x\n", 0);
+			fclose(f);
+		}
+		
 		setfontwidth(fontwidth_normal);
 		displaywidth= (ex-sx);
 		StartX = sx; //+ (ex-sx - 40*fontwidth) / 2; /* center screen */
 
-		ioctl(avs, AVSIOSSCARTPIN8, &fncmodes[screen_mode1]);
-		ioctl(saa, SAAIOSWSS, &saamodes[screen_mode1]);
+		writeproc("/proc/stb/avs/0/sb", fncmodes[screen_mode1]);
+		writeproc("/proc/stb/denc/0/wss", saamodes[screen_mode1]);
 	}
 }
 
@@ -2851,8 +2907,8 @@
 	else if (transpmode == 1) /* semi-transparent BG with FG text */
 	{
 		/* restore videoformat */
-		ioctl(avs, AVSIOSSCARTPIN8, &fnc_old);
-		ioctl(saa, SAAIOSWSS, &saa_old);
+		writeproc("/proc/stb/avs/0/sb", saved_pin8);
+		writeproc("/proc/stb/denc/0/wss", saved_wss);
 
 		ClearBB(transp);
 		tuxtxt_cache.pageupdate = 1;
@@ -2860,8 +2916,8 @@
 	else /* TV mode */
 	{
 		/* restore videoformat */
-		ioctl(avs, AVSIOSSCARTPIN8, &fnc_old);
-		ioctl(saa, SAAIOSWSS, &saa_old);
+		writeproc("/proc/stb/avs/0/sb", saved_pin8);
+		writeproc("/proc/stb/denc/0/wss", saved_wss);
 
 		ClearFB(transp);
 		clearbbcolor = tuxtxt_cache.FullScrColor;
@@ -2912,7 +2968,7 @@
 	PosX += t;
 	int curfontwidth2 = GetCurFontWidth();
 	PosX -= t;
-	int alphachar = tuxtxt_RenderChar(lfb+(yoffset+StartY)*var_screeninfo.xres,  var_screeninfo.xres,Char, &PosX, PosY-StartY, Attribute, zoom, curfontwidth, curfontwidth2, fontheight, transpmode,axdrcs, ascender);
+	int alphachar = tuxtxt_RenderChar(lfb+(yoffset+StartY)*fix_screeninfo.line_length, fix_screeninfo.line_length, Char, &PosX, PosY-StartY, Attribute, zoom, curfontwidth, curfontwidth2, fontheight, transpmode,axdrcs, ascender);
 	if (alphachar <= 0) return;
 
 	if (zoom && Attribute->doubleh)
@@ -2945,22 +3001,18 @@
 #if TUXTXT_DEBUG
 		printf("TuxTxt <FT_Get_Char_Index for Char %x \"%c\" failed\n", alphachar, alphachar);
 #endif
-		tuxtxt_FillRect(lfb,var_screeninfo.xres,PosX, PosY + yoffset, curfontwidth, factor*fontheight, bgcolor);
+		tuxtxt_FillRect(lfb,fix_screeninfo.line_length,PosX, PosY + yoffset, curfontwidth, factor*fontheight, bgcolor);
 		PosX += curfontwidth;
 		return;
 	}
 
-#if HAVE_DVB_API_VERSION >= 3
-	if ((error = FTC_SBitCache_Lookup(cache, &typettf, glyph, &sbit, NULL)) != 0)
-#else
 	if ((error = FTC_SBit_Cache_Lookup(cache, &typettf, glyph, &sbit)) != 0)
-#endif
 	{
 #if TUXTXT_DEBUG
 		printf("TuxTxt <FTC_SBitCache_Lookup: 0x%x> c%x a%x g%x w%d h%d x%d y%d\n",
 				 error, alphachar, Attribute, glyph, curfontwidth, fontheight, PosX, PosY);
 #endif
-		tuxtxt_FillRect(lfb,var_screeninfo.xres,PosX, PosY + yoffset, curfontwidth, fontheight, bgcolor);
+		tuxtxt_FillRect(lfb,fix_screeninfo.line_length,PosX, PosY + yoffset, curfontwidth, fontheight, bgcolor);
 		PosX += curfontwidth;
 		return;
 	}
@@ -2981,11 +3033,7 @@
 			Char = G2table[0][0x20+ Attribute->diacrit];
 		if ((glyph = FT_Get_Char_Index(face, Char)))
 		{
-#if HAVE_DVB_API_VERSION >= 3
-			if ((error = FTC_SBitCache_Lookup(cache, &typettf, glyph, &sbit_diacrit, NULL)) == 0)
-#else
 			if ((error = FTC_SBit_Cache_Lookup(cache, &typettf, glyph, &sbit_diacrit)) == 0)
-#endif
 			{
 					sbitbuffer = localbuffer;
 					memcpy(sbitbuffer,sbit->buffer,sbit->pitch*sbit->height);
@@ -3013,13 +3061,13 @@
 		    Row = 0;
 		}
 		else		
-		    tuxtxt_FillRect(lfb,var_screeninfo.xres,PosX, PosY + yoffset, curfontwidth, Row, bgcolor); /* fill upper margin */
+		    tuxtxt_FillRect(lfb,fix_screeninfo.line_length,PosX, PosY + yoffset, curfontwidth, Row, bgcolor); /* fill upper margin */
 
 		if (ascender - sbit->top + TTFShiftY + he > fontheight)
 			he = fontheight - ascender + sbit->top - TTFShiftY; /* limit char height to defined/calculated fontheight */
 
 
-		p = lfb + PosX + (yoffset + PosY + Row) * var_screeninfo.xres; /* running pointer into framebuffer */
+		p = lfb + PosX*4 + (yoffset + PosY + Row) * fix_screeninfo.line_length; /* running pointer into framebuffer */
 		for (Row = he; Row; Row--) /* row counts up, but down may be a little faster :) */
 		{
 			int pixtodo = (usettf ? sbit->width : curfontwidth);
@@ -3028,8 +3076,8 @@
 			for (Bit = xfactor * (sbit->left + TTFShiftX); Bit > 0; Bit--) /* fill left margin */
 			{
 				for (f = factor-1; f >= 0; f--)
-					*(p + f*var_screeninfo.xres) = bgcolor;
-				p++;
+					memcpy((p + f*fix_screeninfo.line_length),bgra[bgcolor],4);/*bgcolor*/
+				p+=4;
 				if (!usettf)
 					pixtodo--;
 			}
@@ -3049,14 +3097,15 @@
 						color = bgcolor;
 
 					for (f = factor-1; f >= 0; f--)
-						*(p + f*var_screeninfo.xres) = color;
-					p++;
+						memcpy((p + f*fix_screeninfo.line_length),bgra[color],4);
+					p+=4;
 
 					if (xfactor > 1) /* double width */
 					{
 						for (f = factor-1; f >= 0; f--)
-							*(p + f*var_screeninfo.xres) = color;
-						p++;
+							memcpy((p + f*fix_screeninfo.line_length),bgra[color],4);
+						p+=4;
+
 						if (!usettf)
 							pixtodo--;
 					}
@@ -3067,17 +3116,17 @@
 				  Bit > 0; Bit--) /* fill rest of char width */
 			{
 				for (f = factor-1; f >= 0; f--)
-					*(p + f*var_screeninfo.xres) = bgcolor;
-				p++;
+					memcpy((p + f*fix_screeninfo.line_length),bgra[bgcolor],4);
+				p+=4;
 			}
 
-			p = pstart + factor*var_screeninfo.xres;
+			p = pstart + factor*fix_screeninfo.line_length;
 		}
 
 		Row = ascender - sbit->top + he + TTFShiftY;
-		tuxtxt_FillRect(lfb,var_screeninfo.xres,PosX, PosY + yoffset + Row*factor, curfontwidth, (fontheight - Row) * factor, bgcolor); /* fill lower margin */
+		tuxtxt_FillRect(lfb,fix_screeninfo.line_length,PosX, PosY + yoffset + Row*factor, curfontwidth, (fontheight - Row) * factor, bgcolor); /* fill lower margin */
 		if (Attribute->underline)
-			tuxtxt_FillRect(lfb,var_screeninfo.xres,PosX, PosY + yoffset + (fontheight-2)* factor, curfontwidth,2*factor, fgcolor); /* underline char */
+			tuxtxt_FillRect(lfb,fix_screeninfo.line_length,PosX, PosY + yoffset + (fontheight-2)* factor, curfontwidth,2*factor, fgcolor); /* underline char */
 
 		PosX += curfontwidth;
 }
@@ -3462,11 +3511,11 @@
 
 			for (row = 0; row < DRCSROWS; row++)
 				for (col = 0; col < DRCSCOLS; col++)
-					tuxtxt_RenderDRCS(var_screeninfo.xres,
+					tuxtxt_RenderDRCS(fix_screeninfo.line_length,
 						page_char + 20 * (DRCSCOLS * row + col + 2),
 						lfb
-						+ (StartY + fontheight + DRCSYSPC * row + var_screeninfo.yres - var_screeninfo.yoffset) * var_screeninfo.xres
-						+ StartX + DRCSXSPC * col,
+						+ (StartY + fontheight + DRCSYSPC * row + var_screeninfo.yres - var_screeninfo.yoffset) * fix_screeninfo.line_length
+						+ (StartX + DRCSXSPC * col)*4,
 						ax, white, black);
 
 			memset(page_char + 40, 0xff, 24*40); /* don't render any char below row 0 */
@@ -3559,13 +3608,13 @@
 				pageinfo = p;
 				boxed = p->boxed;
 			}
+			if (tuxtxt_cache.colortable)
+				setcolors(tuxtxt_cache.colortable, 16, 16); /* set colors for CLUTs 2+3 */
 			if (boxed || transpmode)
 //				tuxtxt_cache.FullScrColor = transp;
 				FillBorder(transp);
 			else
 				FillBorder(tuxtxt_cache.FullScrColor);
-			if (tuxtxt_cache.colortable) /* as late as possible to shorten the time the old page is displayed with the new colors */
-				setcolors(tuxtxt_cache.colortable, 16, 16); /* set colors for CLUTs 2+3 */
 		}
 		else
 			startrow = 1;
@@ -3698,7 +3747,7 @@
 	if (boxed)
 	{
 		PosX = StartX + column*width;
-		tuxtxt_FillRect(lfb,var_screeninfo.xres,PosX, PosY+yoffset, displaywidth, fontheight, transp);
+		tuxtxt_FillRect(lfb,fix_screeninfo.line_length,PosX, PosY+yoffset, displaywidth, fontheight, transp);
 		return;
 	}
 
@@ -3709,7 +3758,7 @@
 
 		if (l > 9) /* smaller font, if no space for one half space at front and end */
 			setfontwidth(oldfontwidth * 10 / (l+1));
-		tuxtxt_FillRect(lfb,var_screeninfo.xres,PosX, PosY+yoffset, width+(displaywidth%4), fontheight, atrtable[ATR_L250 + column].bg);
+		tuxtxt_FillRect(lfb,fix_screeninfo.line_length,PosX, PosY+yoffset, width+(displaywidth%4), fontheight, atrtable[ATR_L250 + column].bg);
 		PosX += ((width) - (l*fontwidth+l*fontwidth/abx))/2; /* center */
 		for (p = tuxtxt_cache.adip[linkpage]; *p; p++)
 			RenderCharBB(*p, &atrtable[ATR_L250 + column]);
@@ -3718,7 +3767,7 @@
 	else /* display number */
 	{
 		PosX = StartX + column*width;
-		tuxtxt_FillRect(lfb,var_screeninfo.xres,PosX, PosY+yoffset, displaywidth+sx-PosX, fontheight, atrtable[ATR_L250 + column].bg);
+		tuxtxt_FillRect(lfb,fix_screeninfo.line_length,PosX, PosY+yoffset, displaywidth+sx-PosX, fontheight, atrtable[ATR_L250 + column].bg);
 		if (linkpage < tuxtxt_cache.page)
 		{
 			line[6] = '<';
@@ -3888,7 +3937,7 @@
 void CopyBB2FB()
 {
 	unsigned char *src, *dst, *topsrc;
-	int fillcolor, i, screenwidth;
+	int fillcolor, i, screenwidth, swtmp;
 
 	/* line 25 */
 	if (!pagecatching)
@@ -3905,8 +3954,8 @@
 		if (ioctl(fb, FBIOPAN_DISPLAY, &var_screeninfo) == -1)
 			perror("TuxTxt <FBIOPAN_DISPLAY>");
 
-		if (StartX > 0 && *lfb != *(lfb + var_screeninfo.xres * var_screeninfo.yres)) /* adapt background of backbuffer if changed */
-			FillBorder(*(lfb + var_screeninfo.xres * var_screeninfo.yoffset));
+		if (StartX > 0 && *lfb != *(lfb + fix_screeninfo.line_length * var_screeninfo.yres)) /* adapt background of backbuffer if changed */
+			FillBorder(*(lfb + fix_screeninfo.line_length * var_screeninfo.yoffset));
 //			 ClearBB(*(lfb + var_screeninfo.xres * var_screeninfo.yoffset));
 
 		if (clearbbcolor >= 0)
@@ -3917,18 +3966,18 @@
 		return;
 	}
 
-	src = dst = topsrc = lfb + StartY*var_screeninfo.xres;
+	src = dst = topsrc = lfb + StartY*fix_screeninfo.line_length;
 
 
 	if (var_screeninfo.yoffset)
-		dst += var_screeninfo.xres * var_screeninfo.yres;
+		dst += fix_screeninfo.line_length * var_screeninfo.yres;
 	else
 	{
-		src += var_screeninfo.xres * var_screeninfo.yres;
-		topsrc += var_screeninfo.xres * var_screeninfo.yres;
+		src += fix_screeninfo.line_length * var_screeninfo.yres;
+		topsrc += fix_screeninfo.line_length * var_screeninfo.yres;
 	}
 	if (!pagecatching )
-		memcpy(dst+(24*fontheight)*var_screeninfo.xres, src + (24*fontheight)*var_screeninfo.xres, var_screeninfo.xres*fontheight); /* copy line25 in normal height */
+		memcpy(dst+(24*fontheight)*fix_screeninfo.line_length, src + (24*fontheight)*fix_screeninfo.line_length, fix_screeninfo.line_length*fontheight); /* copy line25 in normal height */
 
 	if (transpmode)
 		fillcolor = transp;
@@ -3936,47 +3985,54 @@
 		fillcolor = tuxtxt_cache.FullScrColor;
 
 	if (zoommode == 2)
-		src += 12*fontheight*var_screeninfo.xres;
+		src += 12*fontheight*fix_screeninfo.line_length;
 
 	if (screenmode == 1) /* copy topmenu in normal height (since PIG also keeps dimensions) */
 	{
 		unsigned char *topdst = dst;
 
-		screenwidth = TV43STARTX;
+		screenwidth = ( TV43STARTX ) * 4;
 
 		topsrc += screenwidth;
 		topdst += screenwidth;
 		for (i=0; i < 24*fontheight; i++)
 		{
 			memcpy(topdst, topsrc,ex-screenwidth);
-			topdst += var_screeninfo.xres;
-			topsrc += var_screeninfo.xres;
+			topdst += fix_screeninfo.line_length;
+			topsrc += fix_screeninfo.line_length;
 		}
 	}
 	else if (screenmode == 2)
-		screenwidth = TV169FULLSTARTX;
+		screenwidth = ( TV169FULLSTARTX ) * 4;
 	else
-		screenwidth = var_screeninfo.xres;
+		screenwidth = fix_screeninfo.line_length;
 
 	for (i = StartY; i>0;i--)
 	{
-		memset(dst - i*var_screeninfo.xres, fillcolor, screenwidth);
+		for (swtmp=0; swtmp<screenwidth/4; swtmp++)
+		{
+			memcpy(dst - i*fix_screeninfo.line_length+swtmp*4, bgra[fillcolor], 4);
+		}
 	}
 
 	for (i = 12*fontheight; i; i--)
 	{
 		memcpy(dst, src, screenwidth);
-		dst += var_screeninfo.xres;
+		dst += fix_screeninfo.line_length;
 		memcpy(dst, src, screenwidth);
-		dst += var_screeninfo.xres;
-		src += var_screeninfo.xres;
+		dst += fix_screeninfo.line_length;
+		src += fix_screeninfo.line_length;
 	}
 
 //	if (!pagecatching )
 //		memcpy(dst, lfb + (StartY+24*fontheight)*var_screeninfo.xres, var_screeninfo.xres*fontheight); /* copy line25 in normal height */
-	for (i = var_screeninfo.yres - StartY - 25*fontheight; i >= 0;i--)
+	dst -= fix_screeninfo.line_length;
+	for (i = var_screeninfo.yres - StartY - 25 * fontheight; i >= 0;i--)
 	{
-		memset(dst + var_screeninfo.xres*(fontheight+i), fillcolor, screenwidth);
+		for (swtmp=0; swtmp < screenwidth/4;swtmp++)
+		{
+			memcpy(dst + fix_screeninfo.line_length*(fontheight+i)+swtmp*4, bgra[fillcolor], 4);
+		}
 	}
 }
 
@@ -4204,8 +4260,8 @@
 				case KEY_VOLUMEDOWN:	RCCode = RC_MINUS;	break;
 				case KEY_MUTE:		RCCode = RC_MUTE;	break;
 				case KEY_HELP:		RCCode = RC_HELP;	break;
-				case KEY_SETUP:		RCCode = RC_DBOX;	break;
-				case KEY_HOME:		RCCode = RC_HOME;	break;
+				case KEY_MENU:		RCCode = RC_DBOX;	break;
+				case KEY_EXIT:		RCCode = RC_HOME;	break;
 				case KEY_POWER:		RCCode = RC_STANDBY;	break;
 				}
 				return 1;
@@ -4234,10 +4290,3 @@
 
 	return 0;
 }
-/* Local Variables: */
-/* indent-tabs-mode:t */
-/* tab-width:3 */
-/* c-basic-offset:3 */
-/* comment-column:0 */
-/* fill-column:120 */
-/* End: */
Only in tuxtxt.e1: tuxtxt.c.orig
diff -ru tuxtxt.e1/tuxtxt.h tuxtxt/tuxtxt.h
--- tuxtxt.e1/tuxtxt.h	2008-05-21 09:21:06.000000000 +0200
+++ tuxtxt/tuxtxt.h	2008-05-27 09:44:33.000000000 +0200
@@ -1,3 +1,6 @@
+#ifndef __tuxtxt_h__
+#define __tuxtxt_h__
+
 /******************************************************************************
  *                      <<< TuxTxt - Teletext Plugin >>>                      *
  *                                                                            *
@@ -6,7 +9,13 @@
  *    continued 2004-2005 by Roland Meier <RolandMeier@Siemens.com>           *
  *                       and DBLuelle <dbluelle@blau-weissoedingen.de>        *
  *                                                                            *
- ******************************************************************************/
+ *              ported 2006 to Dreambox 7025 / 32Bit framebuffer              *
+ *                   by Seddi <seddi@i-have-a-dreambox.com>                   *
+ *                                                                            *
+ *              ported 32Bit framebuffer to Tuxtxt v1.99 (2008)               *
+ *                      by the PLi team (Sat-Turner)                          *
+ *                                                                            *
+******************************************************************************/
 
 #define TUXTXT_CFG_STANDALONE 0  // 1:plugin only 0:use library
 #define TUXTXT_DEBUG 0
@@ -41,7 +50,6 @@
 #include <dbox/avs_core.h>
 #include <dbox/saa7126_core.h>
 #include <dbox/fp.h>
-#include <plugin.h>
 #include <dbox/lcd-ks0713.h>
 
 
@@ -66,6 +74,7 @@
 #include "tuxtxt_common.h"
 #else
 /* variables and functions from libtuxtxt */
+extern unsigned char bgra[][4];
 extern tuxtxt_cache_struct tuxtxt_cache;
 extern int tuxtxt_init();
 extern void tuxtxt_close();
@@ -205,11 +214,7 @@
 FTC_Manager     manager;
 FTC_SBitCache   cache;
 FTC_SBit        sbit;
-#if HAVE_DVB_API_VERSION < 3
 #define FONTTYPE FTC_Image_Desc
-#else
-#define FONTTYPE FTC_ImageTypeRec
-#endif
 
 FT_Face			face;
 FONTTYPE typettf;
@@ -247,7 +252,7 @@
 int hotlist[10];
 int maxhotlist;
 
-int pig, avs, saa, rc, fb, lcd;
+int rc, fb, lcd;
 int sx, ex, sy, ey;
 int PosX, PosY, StartX, StartY;
 int lastpage;
@@ -256,7 +261,7 @@
 char dumpl25;
 int catch_row, catch_col, catched_page, pagecatching;
 int prev_100, prev_10, next_10, next_100;
-int fnc_old, saa_old, screen_mode1, screen_mode2, color_mode, trans_mode, auto_national, swapupdown, showhex, menulanguage;
+int screen_mode1, screen_mode2, color_mode, trans_mode, auto_national, swapupdown, showhex, menulanguage;
 int pids_found, current_service, getpidsdone;
 int SDT_ready;
 int pc_old_row, pc_old_col;     /* for page catching */
@@ -267,8 +272,8 @@
 unsigned char axdrcs[12+1+10+1];
 #define aydrcs (axdrcs + 12+1)
 tstPageinfo *pageinfo = 0;/* pointer to cached info of last decoded page */
-const int fncmodes[] = {AVS_FNCOUT_EXT43, AVS_FNCOUT_EXT169};
-const int saamodes[] = {SAA_WSS_43F, SAA_WSS_169F};
+const char * fncmodes[] = {"12", "6"};
+const char * saamodes[] = {"4:3_full_format", "16:9_full_format"};
 
 struct timeval tv_delay;
 int  subtitledelay, delaystarted;
@@ -847,7 +852,7 @@
 //unsigned short page_atrb[40 * 25]; /*  ?????:h:cc:bbbb:ffff -> ?=reserved, h=double height, c=charset (0:G0 / 1:G1c / 2:G1s), b=background, f=foreground */
 
 
-/* colormaps */
+/* colormap */
 
 unsigned short rd0[] = {0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0x00<<8, 0x00<<8, 0x00<<8, 0,      0      };
 unsigned short gn0[] = {0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0x20<<8, 0x10<<8, 0x20<<8, 0,      0      };
@@ -1227,3 +1232,5 @@
 /* comment-column:0 */
 /* fill-column:120 */
 /* End: */
+
+#endif
